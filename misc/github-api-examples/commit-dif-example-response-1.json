{
  "sha": "63072d0a9649f36ca4a8acde26bffbeac6489776",
  "node_id": "MDY6Q29tbWl0NzI5MDMyNjM6NjMwNzJkMGE5NjQ5ZjM2Y2E0YThhY2RlMjZiZmZiZWFjNjQ4OTc3Ng==",
  "commit": {
    "author": {
      "name": "Arie Milner",
      "email": "amilner42@gmail.com",
      "date": "2016-11-14T23:31:56Z"
    },
    "committer": {
      "name": "Arie Milner",
      "email": "amilner42@gmail.com",
      "date": "2016-11-14T23:31:56Z"
    },
    "message": "Fixed ugly scroll bar\n- Used regular nested div to hide scroll bar...css...\n- Set min width on website to 1000px, this is not a mobile app",
    "tree": {
      "sha": "b21f58ba6ace921094cbf7032d07cb60f63038de",
      "url": "https://api.github.com/repos/amilner42/kleen/git/trees/b21f58ba6ace921094cbf7032d07cb60f63038de"
    },
    "url": "https://api.github.com/repos/amilner42/kleen/git/commits/63072d0a9649f36ca4a8acde26bffbeac6489776",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/amilner42/kleen/commits/63072d0a9649f36ca4a8acde26bffbeac6489776",
  "html_url": "https://github.com/amilner42/kleen/commit/63072d0a9649f36ca4a8acde26bffbeac6489776",
  "comments_url": "https://api.github.com/repos/amilner42/kleen/commits/63072d0a9649f36ca4a8acde26bffbeac6489776/comments",
  "author": {
    "login": "amilner42",
    "id": 9031171,
    "node_id": "MDQ6VXNlcjkwMzExNzE=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/9031171?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amilner42",
    "html_url": "https://github.com/amilner42",
    "followers_url": "https://api.github.com/users/amilner42/followers",
    "following_url": "https://api.github.com/users/amilner42/following{/other_user}",
    "gists_url": "https://api.github.com/users/amilner42/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amilner42/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amilner42/subscriptions",
    "organizations_url": "https://api.github.com/users/amilner42/orgs",
    "repos_url": "https://api.github.com/users/amilner42/repos",
    "events_url": "https://api.github.com/users/amilner42/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amilner42/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amilner42",
    "id": 9031171,
    "node_id": "MDQ6VXNlcjkwMzExNzE=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/9031171?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amilner42",
    "html_url": "https://github.com/amilner42",
    "followers_url": "https://api.github.com/users/amilner42/followers",
    "following_url": "https://api.github.com/users/amilner42/following{/other_user}",
    "gists_url": "https://api.github.com/users/amilner42/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amilner42/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amilner42/subscriptions",
    "organizations_url": "https://api.github.com/users/amilner42/orgs",
    "repos_url": "https://api.github.com/users/amilner42/repos",
    "events_url": "https://api.github.com/users/amilner42/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amilner42/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7367e55c6f34fc5964c96b96b3f55b363ee70e02",
      "url": "https://api.github.com/repos/amilner42/kleen/commits/7367e55c6f34fc5964c96b96b3f55b363ee70e02",
      "html_url": "https://github.com/amilner42/kleen/commit/7367e55c6f34fc5964c96b96b3f55b363ee70e02"
    }
  ],
  "stats": {
    "total": 221,
    "additions": 119,
    "deletions": 102
  },
  "files": [
    {
      "sha": "b1db854f271a3052e6e98ab06164b3042d14660a",
      "filename": "website/src/Components/Styles.scss",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/amilner42/kleen/blob/63072d0a9649f36ca4a8acde26bffbeac6489776/website/src/Components/Styles.scss",
      "raw_url": "https://github.com/amilner42/kleen/raw/63072d0a9649f36ca4a8acde26bffbeac6489776/website/src/Components/Styles.scss",
      "contents_url": "https://api.github.com/repos/amilner42/kleen/contents/website/src/Components/Styles.scss?ref=63072d0a9649f36ca4a8acde26bffbeac6489776",
      "patch": "@@ -72,13 +72,26 @@\n     }\n \n     .tutorial-view {\n+      position: relative;\n+      display: block;\n       color: $color7;\n       padding-top: 30px;\n       padding-bottom: 30px;\n       width: 900px;\n+      height: calc(100vh - 240px);\n+      overflow-y: hidden;\n+      overflow-x: hidden;\n       margin: auto;\n       text-align: left;\n \n+      .tutorial-view-hide-scroll {\n+        position: relative;\n+        width: 900px;\n+        padding-right: 50px;\n+        overflow-y: auto;\n+        max-height:  calc(100vh - 240px);\n+      }\n+\n       .code-block {\n         margin: 20px 0 20px 20px;\n         background-color: #EEE;"
    },
    {
      "sha": "ad3e30465b45a7e5f527daaf64abb574afc8f992",
      "filename": "website/src/Components/View.elm",
      "status": "modified",
      "additions": 105,
      "deletions": 102,
      "changes": 207,
      "blob_url": "https://github.com/amilner42/kleen/blob/63072d0a9649f36ca4a8acde26bffbeac6489776/website/src/Components/View.elm",
      "raw_url": "https://github.com/amilner42/kleen/raw/63072d0a9649f36ca4a8acde26bffbeac6489776/website/src/Components/View.elm",
      "contents_url": "https://api.github.com/repos/amilner42/kleen/contents/website/src/Components/View.elm?ref=63072d0a9649f36ca4a8acde26bffbeac6489776",
      "patch": "@@ -151,39 +151,41 @@ tutorialView model =\n         div\n             [ class \"tutorial-view\" ]\n             [ div\n-                [ class \"tutorial-body\" ]\n-                [ text \"\"\"Ok let's get straight to it, all the code snippets assume\n+                [ class \"tutorial-view-hide-scroll\" ]\n+                [ div\n+                    [ class \"tutorial-body\" ]\n+                    [ text \"\"\"Ok let's get straight to it, all the code snippets assume\n                 that you have this at the top of your file:\n                 \"\"\"\n-                , codeBlock\n-                    \"\"\"import * as kleen from \"kleen\";\n+                    , codeBlock\n+                        \"\"\"import * as kleen from \"kleen\";\n                     \"\"\"\n-                , text \"\"\"It's a strongly typed package so you should have typings\n+                    , text \"\"\"It's a strongly typed package so you should have typings\n                 working out of the box (and these typings will always be up to date\n                 with the code, they come from the code). Let's start with the basics\n                 and get ourselves a string.\n                 \"\"\"\n-                , codeBlock \"\"\"const stringSchema: kleen.primitiveSchema = {\n+                    , codeBlock \"\"\"const stringSchema: kleen.primitiveSchema = {\n     primitiveType: kleen.kindOfPrimitive.string\n }\n                     \"\"\"\n-                , text \"\"\"Simple enough. An important thing to note is that\n+                    , text \"\"\"Simple enough. An important thing to note is that\n because we don't hate ourselves stringSchema really is a string, not null or\n undefined. If we wanted to allow our data to be null/undefined then we would:\n \"\"\"\n-                , codeBlock\n-                    \"\"\"const stringOrNotSchema: kleen.primitiveSchema = {\n+                    , codeBlock\n+                        \"\"\"const stringOrNotSchema: kleen.primitiveSchema = {\n     primitiveType: kleen.kindOfPrimitive.string,\n     nullAllowed: true,\n     undefinedAllowed: true\n }\n                     \"\"\"\n-                , text \"\"\"Ok but how would we actually use these structures\n+                    , text \"\"\"Ok but how would we actually use these structures\n                 we've created? You silly...this library only exposes one\n                 method, what did you think we were going to do?!\n                 \"\"\"\n-                , codeBlock\n-                    \"\"\"kleen.validModel(stringSchema)(\"asdf\")\n+                    , codeBlock\n+                        \"\"\"kleen.validModel(stringSchema)(\"asdf\")\n .then(() => {\n   // In this case, it will be valid.\n })\n@@ -193,59 +195,59 @@ undefined. If we wanted to allow our data to be null/undefined then we would:\n   // not go the catch because \"asdf\" is a valid against the string schema.\n });\n                     \"\"\"\n-                , text \"\"\"You may be confused at this point for one of 2 reasons:\n+                    , text \"\"\"You may be confused at this point for one of 2 reasons:\n                 \"\"\"\n-                , ol\n-                    []\n-                    [ li\n+                    , ol\n                         []\n-                        [ text \"Why are there double parenthesis on the function call\" ]\n-                    , li\n-                        []\n-                        [ text \"Why is it async? (.then and .catch)\" ]\n+                        [ li\n+                            []\n+                            [ text \"Why are there double parenthesis on the function call\" ]\n+                        , li\n+                            []\n+                            [ text \"Why is it async? (.then and .catch)\" ]\n+                        ]\n                     ]\n-                ]\n-            , text \"\"\"One thing at a time...no need to be confused about the\n+                , text \"\"\"One thing at a time...no need to be confused about the\n                 double parenthesis, that's simply because the function is\n                 curried. You call it one parameter at a time, which gives you\n                 the benefit of being able to succintly create schema validators:\n                 \"\"\"\n-            , codeBlock\n-                \"\"\"const aValidString = kleen.validModel(stringSchema);\n+                , codeBlock\n+                    \"\"\"const aValidString = kleen.validModel(stringSchema);\n \n // And you can call it later with the remaining param:\n \n aValidString(\"someString\"); // Yes\n aValidString(undefined);    // No\n                 \"\"\"\n-            , text \"\"\"Ok what about the then-catch-block, what was up with that?\n+                , text \"\"\"Ok what about the then-catch-block, what was up with that?\n             Well schema validation is async, in fact, async is a core part of\n             the design, so all the async is handled for you behind the scenes!\n             We'll get back to this later when we talk about restrictions. For\n             now let's focus on schemas, we saw above we defined a\n             primitiveSchema. What other schemas can we define?\n             \"\"\"\n-            , codeBlock\n-                \"\"\"kleen.primitiveSchema // a primitive\n+                , codeBlock\n+                    \"\"\"kleen.primitiveSchema // a primitive\n kleen.objectSchema    // Good old regular { ... }\n kleen.arraySchema     // Can't forget about [...]\n kleen.unionSchema     // And lastly union types!\n                 \"\"\"\n-            , text \"\"\"These 4 building blocks compose how we describe our data.\n+                , text \"\"\"These 4 building blocks compose how we describe our data.\n             If you got the epiphany that this maps over to typescript, that's\n             because it does. One of the core ideas behind this library is to\n             take the typescript compile times guarantees and extend them to\n             runtime. So if we wanted to create an object with two properties,\n             both strings, we would do:\"\"\"\n-            , codeBlock\n-                \"\"\"const basicUserSchema: kleen.objectSchema = {\n+                , codeBlock\n+                    \"\"\"const basicUserSchema: kleen.objectSchema = {\n     objectProperties: {\n       email: stringSchema, // remember we defined `stringSchema` above\n       password: stringSchema\n     }\n }\n                 \"\"\"\n-            , text \"\"\" Of course sub properties could be object themselves, in\n+                , text \"\"\" Of course sub properties could be object themselves, in\n             fact they could be any of the 4 possible schemas listed above; the\n             schemas are our building blocks.\n \n@@ -254,8 +256,8 @@ kleen.unionSchema     // And lastly union types!\n             primitive, types do not need to be nested in an object, think about\n             it the same way as the typescript `type`).\n             \"\"\"\n-            , codeBlock\n-                \"\"\"const arrayOfUsersSchema: kleen.arraySchema = {\n+                , codeBlock\n+                    \"\"\"const arrayOfUsersSchema: kleen.arraySchema = {\n     arrayElementType: {\n       objectProperties: {\n         \"somePropertyName\": {\n@@ -274,9 +276,9 @@ const invalidArray3 = [ { somePropertyName: true }];\n const invalidArray4 = [ { somePropertyName: 43, extraProperty: \"uhoh\" }];\n const invalidArray5 = [ { }];\n                 \"\"\"\n-            , text \"Ok, so the only thing you haven't seen me use is a `unionSchema`.\"\n-            , codeBlock\n-                \"\"\"const numberOrBoolSchema: kleen.unionSchema = {\n+                , text \"Ok, so the only thing you haven't seen me use is a `unionSchema`.\"\n+                , codeBlock\n+                    \"\"\"const numberOrBoolSchema: kleen.unionSchema = {\n     unionTypes: [\n         {\n             primitiveType: kleen.kindOfPrimitive.number\n@@ -294,24 +296,24 @@ const invalidArray5 = [ { }];\n // success case. All this async ordering is done for you, you don't need to\n // worry about it at all.\n                 \"\"\"\n-            , text \"\"\"Well there you go, you now know how to validate basically\n+                , text \"\"\"Well there you go, you now know how to validate basically\n             any structure, you could now extend your typescript compile time\n             guarantees to runtime validation. In fact if you head over to the\n             generator, you could do that automatically, you give the generator\n             types/interfaces and it spits out the kleen schemas for you!\n             Remember a core idea of this library is to be a thin layer over\n             typescript.\n             \"\"\"\n-            , p\n-                []\n-                [ text \"\"\"\n+                , p\n+                    []\n+                    [ text \"\"\"\n                 But hold your horses captain, there's more. What if we don't only\n                 care that the type is correct, but also some restrictions are met,\n                 perhaps the passwod has to be longer than 85 characters?\n                 \"\"\"\n-                ]\n-            , codeBlock\n-                \"\"\"const userWithPasswordRestrictionSchema: objectSchema = {\n+                    ]\n+                , codeBlock\n+                    \"\"\"const userWithPasswordRestrictionSchema: objectSchema = {\n     objectProperties: {\n         email: {\n             primitiveType: kleen.kindOfPrimitive.string\n@@ -336,23 +338,23 @@ const invalidArray5 = [ { }];\n     }\n }\n                 \"\"\"\n-            , text \"\"\" Well there you go, now our users hate us as much as we\n+                , text \"\"\" Well there you go, now our users hate us as much as we\n             hate them. An important thing to note is that we didn't have to\n             check that `password` was a string and that it wasn't null/undefined\n             inside our restriction, our type checking is always performed first\n             and only on type-check-success are our restrictions run. We ar\n             separating type-validation from data-validation, this is another\n             core concept of this library.\n             \"\"\"\n-            , p\n-                []\n-                [ text \"\"\"Another important thing to realize is that\n+                , p\n+                    []\n+                    [ text \"\"\"Another important thing to realize is that\n                 restrictions can be placed at any level. In the example above,\n                 we could have gotten an identical schema but with the\n                 restriction placed one level higher, let me show you:\n                 \"\"\" ]\n-            , codeBlock\n-                \"\"\"// CODE SMELL: restriction should be placed on password field.\n+                , codeBlock\n+                    \"\"\"// CODE SMELL: restriction should be placed on password field.\n const userWithPasswordRestrictionsSchema = {\n     objectProperties: {\n         \"email\": {\n@@ -369,7 +371,7 @@ const userWithPasswordRestrictionsSchema = {\n     });\n };\n                 \"\"\"\n-            , text \"\"\"That being said, just because we can put restrictions at\n+                , text \"\"\"That being said, just because we can put restrictions at\n             the highest level, doesn't mean we should. In fact, we should place\n             restrictions at the most specific possible level, in the password\n             case above all we need is the password so we should attach it to\n@@ -380,16 +382,16 @@ const userWithPasswordRestrictionsSchema = {\n             using both the email and password field, otherwise it should have\n             been at a more specific level).\n             \"\"\"\n-            , p\n-                []\n-                [ text \"\"\"Ok hypothetically let's say we had another restriction\n+                , p\n+                    []\n+                    [ text \"\"\"Ok hypothetically let's say we had another restriction\n                 on the top level of the user, perhaps forcing that the password\n                 be the same name as the user (ya...real secure...). It would\n                 look like:\n                 \"\"\"\n-                ]\n-            , codeBlock\n-                \"\"\" // Demonstrating order of sub-restrictions\n+                    ]\n+                , codeBlock\n+                    \"\"\" // Demonstrating order of sub-restrictions\n const userWithPasswordRestrictionsSchema = {\n     objectProperties: {\n         \"email\": {\n@@ -407,17 +409,17 @@ const userWithPasswordRestrictionsSchema = {\n     });\n };\n             \"\"\"\n-            , text \"\"\"In this case, once the outermost restriction is run is it\n+                , text \"\"\"In this case, once the outermost restriction is run is it\n             possible that the password is less than 85 characters? No! This is\n             another important thing to understand, not only is the type\n             guaranteed to be correct when a restriction is run, it's also\n             guaranteed that all sub-restrictions have been run and have passed.\n             This should give you a good idea of the order of model validation\n             and the way all the async tasks are chained together.\n             \"\"\"\n-            , p\n-                []\n-                [ text \"\"\" Ok so you understand restrictions and schemas, at\n+                , p\n+                    []\n+                    [ text \"\"\" Ok so you understand restrictions and schemas, at\n                 this point you can not only map over all the compile-time type\n                 validation from typescript, you can also add your data\n                 validation to the schema. Custom errors are allowed with\n@@ -427,8 +429,8 @@ const userWithPasswordRestrictionsSchema = {\n                 throw custom errors on type failure as well, how would we do\n                 that? Easy:\n                 \"\"\"\n-                ]\n-            , codeBlock \"\"\"const stringSchema: kleen.primitiveSchema = {\n+                    ]\n+                , codeBlock \"\"\"const stringSchema: kleen.primitiveSchema = {\n     primitiveType: kleen.kindOfPrimitive.string,\n     typeFailureError: \"banana\" /* anything you want */\n }\n@@ -442,61 +444,62 @@ kleen.validModel(stringSchema)(5)\n     // error will be \"banana\" in this case because there was a type failure!\n })\n                 \"\"\"\n-            , text \"\"\" Ok so that pretty much sums everything up! Pat yourself\n+                , text \"\"\" Ok so that pretty much sums everything up! Pat yourself\n             on the back, you just learnt a full new library. Ok enough, you're\n             embarrasing yourself. Seriously stop it. Ok let's go summarize the\n             concepts.\n             \"\"\"\n-            , h3\n-                []\n-                [ text \"Summary\" ]\n-            , text \"validModel guarantees the following:\"\n-            , ul\n-                []\n-                [ li\n-                    []\n-                    [ text \"There are no extra properties on objects in your model.\" ]\n-                , li\n+                , h3\n                     []\n-                    [ text \"There are no missing properties on objects in your model.\" ]\n-                , li\n+                    [ text \"Summary\" ]\n+                , text \"validModel guarantees the following:\"\n+                , ul\n                     []\n-                    [ text \"Your model has the correct type.\" ]\n-                , li\n-                    []\n-                    [ text \"Your model passes all restrictions.\" ]\n-                ]\n-            , text \"In terms of how validModel works we know the following:\"\n-            , ul\n-                []\n-                [ li\n+                    [ li\n+                        []\n+                        [ text \"There are no extra properties on objects in your model.\" ]\n+                    , li\n+                        []\n+                        [ text \"There are no missing properties on objects in your model.\" ]\n+                    , li\n+                        []\n+                        [ text \"Your model has the correct type.\" ]\n+                    , li\n+                        []\n+                        [ text \"Your model passes all restrictions.\" ]\n+                    ]\n+                , text \"In terms of how validModel works we know the following:\"\n+                , ul\n                     []\n-                    [ text \"\"\"Valid model only runs restrictions after the type\n+                    [ li\n+                        []\n+                        [ text \"\"\"Valid model only runs restrictions after the type\n                     is confirmed to be correct.\"\"\"\n+                        ]\n+                    , li\n+                        []\n+                        [ text \"\"\" Valid model only runs restrictions after\n+                    sub-restrictions are met.\"\"\" ]\n                     ]\n-                , li\n+                , div\n+                    [ class \"tutorial-end\" ]\n+                    [ text \"THE END\" ]\n+                , p\n                     []\n-                    [ text \"\"\" Valid model only runs restrictions after\n-                    sub-restrictions are met.\"\"\" ]\n-                ]\n-            , div\n-                [ class \"tutorial-end\" ]\n-                [ text \"THE END\" ]\n-            , p\n-                []\n-                [ text \"\"\"And that's pretty much it! If you enjoy this library or the\n+                    [ text \"\"\"And that's pretty much it! If you enjoy this library or the\n                 tutorial or the code generator, please go and star the project (or\n                 follow me on github). I'd really appreciate it and it helps me\n                 continue working on 100% open source projects! Thanks!\n                 \"\"\" ]\n-            , a\n-                [ href \"https://github.com/amilner42\" ]\n-                [ text \"Follow me on Github\" ]\n-            , a\n-                [ href \"https://github.com/amilner42/kleen\"\n-                , class \"tutorial-star-link\"\n+                , a\n+                    [ href \"https://github.com/amilner42\" ]\n+                    [ text \"Follow me on Github\" ]\n+                , a\n+                    [ href \"https://github.com/amilner42/kleen\"\n+                    , class \"tutorial-star-link\"\n+                    ]\n+                    [ text \"Star the project\" ]\n                 ]\n-                [ text \"Star the project\" ]\n             ]\n \n "
    },
    {
      "sha": "70a882b47403a7f2bcd097cad6b0dd7334aa4e4f",
      "filename": "website/src/Styles/global.scss",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/amilner42/kleen/blob/63072d0a9649f36ca4a8acde26bffbeac6489776/website/src/Styles/global.scss",
      "raw_url": "https://github.com/amilner42/kleen/raw/63072d0a9649f36ca4a8acde26bffbeac6489776/website/src/Styles/global.scss",
      "contents_url": "https://api.github.com/repos/amilner42/kleen/contents/website/src/Styles/global.scss?ref=63072d0a9649f36ca4a8acde26bffbeac6489776",
      "patch": "@@ -5,6 +5,7 @@ html, body, #main {\n   @include full-screen-absolute();\n   font-family: 'Arvo', serif;\n   background-color: white;\n+  min-width: 1000px;\n }\n \n code {"
    }
  ]
}
